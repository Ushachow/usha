import java.util.*;
public class Division
{
    public static void main (String args[])
    {
        try
        {
            int dividebyzero  = 105/0;
            System.out.println("the divisibily rule");
        }
        catch(ArithmeticException e)
        {
            System.out.println(e.getMessage());
        }
    }
}
output:
/ by zero
                              program2
import java.util.*;
public class ThrowDemo
{
    public static void main(String args[])
    {
        try
        {
            throw new ArithmeticException("this is manually throw exception");
        }
        catch(ArithmeticException exception)
        {
            exception.printStackTrace();
        }
    }
}
output:
java.lang.ArithmeticException: this is manually throw exception
        at ThrowDemo.main(ThrowDemo.java:8)
                                       program3
import java.util.*;
public class Function
{
    public static void main(String args[])
    {
        System.out.println("welcome");
        {
            try{
                System.out.println("inside try before exception");
                try{
                    System.out.println("nested");
                }catch (ArithmeticException e)
                {
                    System.out.println("subclass Exception");
                }
            }catch(Exception e)
            {
                System.out.println("super class Exception");
            }
        }
    }
}
output:
welcome
inside try before exception
nested
                           program4
import java.util.*;
public class SomeClass
{
    public static void main(String args[])
    {
        m();
    }
    static void m()
    {
        throw new NullPointerException();
    }
       
}
output:
Exception in thread "main" java.lang.NullPointerException
        at SomeClass.m(SomeClass.java:10)
        at SomeClass.main(SomeClass.java:6)
                            program5
import java.util.*;
public class FinallyDemo
{
    public static int myMethod()
    {
        try
        {
            return 0;
        }
        catch (Exception ex)
        {
            System.out.println();
        }
        finally
        {
            System.out.println("inside finally block");
            return 0;
        }
    }
    public static void main(String args[])
    {
        System.out.println(FinallyDemo.myMethod());
    }
}
output:
inside finally block
0
